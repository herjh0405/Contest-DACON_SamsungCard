{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"동서발전 태양관 발전량 예측_lightgbm.ipynb 오후 2:05 오후 2:05","private_outputs":true,"provenance":[],"collapsed_sections":[],"mount_file_id":"1XChOrU7NuMzp2vaCspJGesz9ntD7S8Zq","authorship_tag":"ABX9TyNUHnDuuySwLrmawC5LBKqF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"-YZRmBdz_gYg"},"source":["# !pip install wandb\n","# !pip install lightgbm --upgrade\n","# !pip install neuralprophet\n","# !pip install kaggler"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"D9777jeO_1Vb"},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import lightgbm as lgb\n","from datetime import datetime\n","from neuralprophet import NeuralProphet"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kr5MGldB_9_G"},"source":["import wandb\n","from wandb.lightgbm import wandb_callback"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"S7doPSWZAA7U"},"source":["path = '/content/drive/MyDrive/solar_data'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iuMtFTkFABWt"},"source":["energy = pd.read_csv(path+'/energy.csv')\n","dangjin_fcst = pd.read_csv(path+'/dangjin_fcst_data.csv')\n","ulsan_fcst = pd.read_csv(path+'/ulsan_fcst_data.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GK79cMGvdNX1"},"source":["## 시간 변환\n","데이터 시간을 1-24에서 0-23으로 변경"]},{"cell_type":"code","metadata":{"id":"_FPM60HvdPTV"},"source":["def convert_time(x) :\n","    Ymd, HMS = x.split(' ')\n","    H, M, S = HMS.split(':')\n","    H = str(int(H)-1)\n","    HMS = ':'.join([H, M, S])\n","    return ' '.join([Ymd, HMS])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iPkUPLozdXQr"},"source":["energy['time'] = energy['time'].apply(lambda x: convert_time(x))\n","energy['time'] = pd.to_datetime(energy['time'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ky66aLaid8Zl"},"source":["energy.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"riHKAdsqABdZ"},"source":["dangjin_fcst.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fPmMaroaCa1B"},"source":["ulsan_fcst.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l_DYs32-VfIA"},"source":["def to_date(x) :\n","    return pd.DateOffset(hours=x)\n","    \n","def generate_df(df_):\n","    df = df_.copy()\n","\n","    df['Forecast_time'] = pd.to_datetime(df['Forecast time'])\n","\n","    # 20 시\n","    temp_1 = df[df[\"forecast\"] == 4.0]\n","    temp_1 = temp_1[temp_1[\"Forecast time\"].apply(lambda x: \"20:00:00\" in x)]\n","    temp_1.loc[:, 'Forecast_time'] = temp_1.loc[:, 'Forecast_time'] + temp_1.loc[:, 'forecast'].map(to_date)\n","\n","    # 23 시\n","    temp_2 = df[df[\"forecast\"] <= 22]\n","    temp_2 = temp_2[temp_2[\"Forecast time\"].apply(lambda x: \"23:00:00\" in x)]\n","    temp_2.loc[:, 'Forecast_time'] = temp_2.loc[:, 'Forecast_time'] + temp_2.loc[:, 'forecast'].map(to_date)\n","\n","    # 병합\n","    temp = pd.concat([temp_1, temp_2])\n","\n","    # 정렬\n","    temp.sort_values(by=['Forecast_time'], inplace=True)\n","    temp = temp[['Forecast_time', 'Temperature', 'Humidity', 'WindSpeed', 'WindDirection', 'Cloud']]\n","\n","    mer_df = pd.DataFrame()\n","    mer_df['Forecast_time'] = pd.date_range(start=temp['Forecast_time'].iloc[0], end=temp['Forecast_time'].iloc[-1], freq='H')\n","    mer_df = pd.merge(mer_df, temp, on='Forecast_time', how='outer')\n","\n","    inter_mer = mer_df.interpolate()\n","    \n","    return inter_mer"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-R-2hY7lVhld"},"source":["dangjin_fcst = generate_df(dangjin_fcst)\n","ulsan_fcst = generate_df(ulsan_fcst)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JLaGhj38DvUt"},"source":["plt.figure(figsize=(20,5))\n","days = 5\n","plt.plot(dangjin_fcst.loc[:24*days, 'Forecast_time'], dangjin_fcst.loc[:24*days, 'Temperature'], '.-')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"03e6ViVLMmGJ"},"source":["dangjin_fcst['Forecast_time'] = dangjin_fcst['Forecast_time'].astype(str)\n","ulsan_fcst['Forecast_time'] = ulsan_fcst['Forecast_time'].astype(str)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ptxHqvGFMjau"},"source":["def train_datast(energy_df, fcst_df, target):\n","    # 일기 예보 있는 날짜만 선택\n","    energy = energy_df.loc[24:]\n","    energy.index = range(energy.shape[0])\n","\n","    # 발전량 데이터가 있는 날짜만 선택\n","    fcst = fcst_df.loc[:25608-1]\n","    fcst.index = range(fcst.shape[0])\n","\n","    # 발전량과 일기예보 연결\n","    concat_df = pd.concat([energy, fcst], axis=1)\n","\n","    # 예보 시간 및 날짜 정보 feature로 추가\n","    concat_df['date'] = concat_df['Forecast_time'].str.split(' ').str[0]\n","    concat_df['hour'] = concat_df['Forecast_time'].str.split(' ').str[1].str.split(':').str[0].astype(int)\n","\n","    concat_df['year'] = concat_df['date'].str.split('-').str[0].astype(int)\n","    concat_df['month'] = concat_df['date'].str.split('-').str[1].astype(int)\n","    concat_df['day'] = concat_df['date'].str.split('-').str[2].astype(int)\n","\n","    # 예보 시간, 날짜, 기상 예보 및 발전량 선택\n","    feature_df = concat_df[['year', 'month', 'day', 'hour', 'Temperature', 'Humidity', 'WindSpeed', 'WindDirection', 'Cloud', target]]\n","    # Null값 데이터 삭제\n","    feature_df.dropna(inplace=True)\n","\n","    # 마지막 30일을 검증데이터셋으로 나머지를 학습 데이터셋으로 선택\n","    train_df = feature_df.iloc[:-24*30]\n","    val_df = feature_df.iloc[-24*30:]\n","\n","    # 발전량이 0인 데이터를 제외\n","    train_df = train_df[train_df[target]!=0]\n","    \n","    train_x = train_df.loc[:, 'year':'Cloud'].to_numpy()\n","    train_y = train_df[target].to_numpy()\n","    \n","    val_x = val_df.loc[:, 'year':'Cloud'].to_numpy()\n","    val_y = val_df[target].to_numpy()\n","\n","    return train_x, train_y, val_x, val_y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wplqFgpRHerd"},"source":["def nmae_10(y_pred, dataset):\n","    y_true = dataset.get_label()\n","    \n","    absolute_error = abs(y_true - y_pred)\n","    absolute_error /= capacity\n","    \n","    target_idx = np.where(y_true>=capacity*0.1)\n","    \n","    nmae = 100 * absolute_error[target_idx].mean()\n","    \n","    return 'score', nmae, False"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"p4GwErAqHeup"},"source":["def sola_nmae(answer, pred):\n","    absolute_error = np.abs(answer - pred)\n","    \n","    absolute_error /= capacity\n","    \n","    target_idx = np.where(answer>=capacity*0.1)\n","    \n","    nmae = 100 * absolute_error[target_idx].mean()\n","    \n","    return nmae"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bJEKiKrcp_0t"},"source":["params = {'bagging_freq': 1, 'verbosity': -1, 'seed': 42, 'num_threads': -1, 'feature_pre_filter': False, \n","          'objective': 'regression', 'metric': 'mae', 'boosting': 'gbdt', 'bagging_fraction': 0.8,\n","          'feature_fraction': 0.9, 'lambda_l1': 1, 'lambda_l2': 0.1, 'learning_rate': 0.019985268816502758, \n","          'max_depth': -1, 'min_child_samples': 10, 'num_leaves': 63}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZDMCSPxrN3p0"},"source":["## 당진수상태양광 예측 모델 학습"]},{"cell_type":"code","metadata":{"id":"bVOp2UqkHe2p"},"source":["wandb.init(project='Dacon-Dongseo', entity='herjh0405', name='LightGBM')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zAtgtBb9He6W"},"source":["train_x, train_y, val_x, val_y = train_datast(energy, dangjin_fcst, target='dangjin_floating')\n","train_dataset = lgb.Dataset(train_x, train_y)\n","val_dataset = lgb.Dataset(val_x, val_y)\n","capacity = 1000\n","dangjin_floating_model = lgb.train(params, train_dataset, 10000, val_dataset, feval=nmae_10, verbose_eval=500, early_stopping_rounds=100, callbacks=[wandb_callback()])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hYvX3c5iHfON"},"source":["pred = dangjin_floating_model.predict(val_x)\n","\n","plt.figure(figsize=(20,5))\n","plt.plot(val_y, label='true')\n","plt.plot(pred, label='pred')\n","plt.legend()\n","plt.show()\n","print('CV Score : ', sola_nmae(val_y, pred))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"phBIOEoiNaK_"},"source":["## 당진자재창고태양광 예측 모델 학습"]},{"cell_type":"code","metadata":{"id":"yjYjen71OIGZ"},"source":["wandb.init(project='Dacon-Dongseo', entity='herjh0405', name='LightGBM')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8Xo4vQ3ZN7eW"},"source":["train_x, train_y, val_x, val_y = train_datast(energy, dangjin_fcst, target='dangjin_warehouse')\n","train_dataset = lgb.Dataset(train_x, train_y)\n","val_dataset = lgb.Dataset(val_x, val_y)\n","capacity = 700\n","dangjin_warehouse_model = lgb.train(params, train_dataset, 10000, val_dataset, feval=nmae_10, verbose_eval=500, early_stopping_rounds=100, callbacks=[wandb_callback()])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ME1A8riCN7hN"},"source":["pred = dangjin_floating_model.predict(val_x)\n","\n","plt.figure(figsize=(20,5))\n","plt.plot(val_y, label='true')\n","plt.plot(pred, label='pred')\n","plt.legend()\n","plt.show()\n","print('CV Score : ', sola_nmae(val_y, pred))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SlYfbuSQN7ke"},"source":["## 당진태양광 예측 모델 학습\n","\n"]},{"cell_type":"code","metadata":{"id":"vGB1GJ_xN7m1"},"source":["wandb.init(project='Dacon-Dongseo', entity='herjh0405', name='LightGBM')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"n4A7RPzcN7pw"},"source":["train_x, train_y, val_x, val_y = train_datast(energy, dangjin_fcst, target='dangjin')\n","train_dataset = lgb.Dataset(train_x, train_y)\n","val_dataset = lgb.Dataset(val_x, val_y)\n","capacity = 1000\n","dangjin_model = lgb.train(params, train_dataset, 10000, val_dataset, feval=nmae_10, verbose_eval=500, early_stopping_rounds=100, callbacks=[wandb_callback()])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vYzjzW8pN7r0"},"source":["pred = dangjin_model.predict(val_x)\n","\n","plt.figure(figsize=(20,5))\n","plt.plot(val_y, label='true')\n","plt.plot(pred, label='pred')\n","plt.legend()\n","plt.show()\n","print('CV Score : ', sola_nmae(val_y, pred))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t5QZIsOSN7u4"},"source":["## 울산태양광 예측 모델 학습"]},{"cell_type":"code","metadata":{"id":"Euf47HMgN7xf"},"source":["wandb.init(project='Dacon-Dongseo', entity='herjh0405', name='LightGBM')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TN9AocS4PH3R"},"source":["train_x, train_y, val_x, val_y = train_datast(energy, ulsan_fcst, target='ulsan')\n","train_dataset = lgb.Dataset(train_x, train_y)\n","val_dataset = lgb.Dataset(val_x, val_y)\n","capacity = 500\n","ulsan_model = lgb.train(params, train_dataset, 10000, val_dataset, feval=nmae_10, verbose_eval=500, early_stopping_rounds=100, callbacks=[wandb_callback()])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bT-4wkvwPH7-"},"source":["pred = ulsan_model.predict(val_x)\n","\n","plt.figure(figsize=(20,5))\n","plt.plot(val_y, label='true')\n","plt.plot(pred, label='pred')\n","plt.legend()\n","plt.show()\n","print('CV Score : ', sola_nmae(val_y, pred))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Frpm-F8FPIAN"},"source":["## 테스트 데이터 전처리"]},{"cell_type":"code","metadata":{"id":"HawUXSEzPO98"},"source":["wandb.init(project='Dacon-Dongseo', entity='herjh0405', name='LightGBM')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dCohbvzYPPa2"},"source":["def test_datast(fcst_df):\n","    start = '2021-02-01 00:00:00'\n","    end = '2021-02-28 23:00:00'\n","    \n","    start_idx = fcst_df[fcst_df['Forecast_time']==start].index[0]\n","    end_idx = fcst_df[fcst_df['Forecast_time']==end].index[0]\n","    \n","    test_df = fcst_df.loc[start_idx:end_idx, :].copy()\n","    \n","    test_df['date'] = test_df['Forecast_time'].str.split(' ').str[0]\n","    test_df['hour'] = test_df['Forecast_time'].str.split(' ').str[1].str.split(':').str[0].astype(int)\n","    \n","    test_df['year'] = test_df['date'].str.split('-').str[0].astype(int)\n","    test_df['month'] = test_df['date'].str.split('-').str[1].astype(int)\n","    test_df['day'] = test_df['date'].str.split('-').str[2].astype(int)\n","    \n","    test_df = test_df[['year', 'month', 'day', 'hour', 'Temperature', 'Humidity', 'WindSpeed', 'WindDirection', 'Cloud']]\n","    \n","    test_x = test_df.to_numpy()\n","    \n","    return test_x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"heI2b5QvPPer"},"source":["dangjin_test = test_datast(dangjin_fcst)\n","ulsan_test = test_datast(ulsan_fcst)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RpCrj9JIPPif"},"source":["dangjin_floating_pred = dangjin_floating_model.predict(dangjin_test)\n","dangjin_warehouse_pred = dangjin_warehouse_model.predict(dangjin_test)\n","dangjin_pred = dangjin_model.predict(dangjin_test)\n","ulsan_pred = ulsan_model.predict(ulsan_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d6j46_1SPPl9"},"source":["submission = pd.read_csv(path+'/sample_submission.csv')\n","\n","submission.iloc[:24*28, 1] = dangjin_floating_pred\n","submission.iloc[:24*28, 2] = dangjin_warehouse_pred\n","submission.iloc[:24*28, 3] = dangjin_pred\n","submission.iloc[:24*28, 4] = ulsan_pred"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0CMlqpbdPPpN"},"source":["submission.to_csv('./20210529_02.csv', index=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lVjyuB80R1AP"},"source":[""],"execution_count":null,"outputs":[]}]}