{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"신용카드_사용자_연체_예측_1위_Catboost","private_outputs":true,"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMADDBbkxsn8HNtI4RoOjoD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"HZlFN6P9q4WN"},"source":["### Google Colab mount"]},{"cell_type":"code","metadata":{"id":"NBUKIo79nrEH"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"M4QRi95lq7PY"},"source":["### 패키지 설치"]},{"cell_type":"code","metadata":{"id":"FAXnhi1pns6h"},"source":["# !pip install catboost\n","# !pip install category_encoders"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LSc7-5garA4Z"},"source":["### 라이브러리 구성"]},{"cell_type":"code","metadata":{"id":"QVWIX008ntdF"},"source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import warnings, random\n","warnings.filterwarnings(action='ignore')\n","\n","from sklearn.metrics import log_loss\n","from sklearn.preprocessing import StandardScaler\n","from category_encoders.ordinal import OrdinalEncoder\n","from sklearn.model_selection import StratifiedKFold\n","\n","from sklearn.cluster import KMeans\n","from catboost import CatBoostClassifier, Pool"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yoYehdy-rDD-"},"source":["### 데이터 불러오기"]},{"cell_type":"code","metadata":{"id":"3wsQuHqVnthI"},"source":["path = '/content/drive/MyDrive/DACON/DACON_Credit/'\n","train = pd.read_csv(path+'train.csv')\n","test = pd.read_csv(path+'test.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OSOI_eFgntlE"},"source":["## 데이터 전처리"]},{"cell_type":"markdown","metadata":{"id":"iEw-UqZ5ntov"},"source":["### 1. 결측치 처리"]},{"cell_type":"code","metadata":{"id":"x8f4mOlOnttD"},"source":["train.fillna('NaN', inplace=True)\n","test.fillna('NaN', inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XllM8z_ArI2A"},"source":["### 2. 이상치 처리\n","* train['family_size] > 7인 데이터 제거"]},{"cell_type":"code","metadata":{"id":"PHkE3q0arI5E"},"source":["train = train[train['family_size'] <= 7]\n","train = train.reset_index(drop=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ECpSNgNerI7A"},"source":["## Feature Engineering"]},{"cell_type":"markdown","metadata":{"id":"5QpXI7gBrI9Z"},"source":["### 1. 의미없는 변수 제거\n","* index 제거\n","* FLAG_MOBIL 삭제 : 모든 값이 1로 동일"]},{"cell_type":"code","metadata":{"id":"Ol8Iq1mmrI_j"},"source":["train.drop(['index', 'FLAG_MOBIL'], axis=1, inplace=True)\n","test.drop(['index', 'FLAG_MOBIL'], axis=1, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EQPaLMJwrJCE"},"source":["### 2. DAYS_EMPLOYED\n","* 양수인 데이터는 현재 무직자로 판단, 0처리"]},{"cell_type":"code","metadata":{"id":"R5NyGjFfrJD8"},"source":["train['DAYS_EMPLOYED'] = train['DAYS_EMPLOYED'].map(lambda x: 0 if x > 0 else x)\n","test['DAYS_EMPLOYED'] = test['DAYS_EMPLOYED'].map(lambda x: 0 if x > 0 else x)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QxCiL44xrJGH"},"source":["### 3. DAYS_BIRTH, begin_month, DAYS_EMPLOYED\n","* 음수값 -> 양수 변환"]},{"cell_type":"code","metadata":{"id":"2LVvcdPRrJII"},"source":["feats = ['DAYS_BIRTH', 'begin_month', 'DAYS_EMPLOYED']\n","for feat in feats :\n","    train[feat] = np.abs(train[feat])\n","    test[feat] = np.abs(test[feat])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0qtnWV_4uMLn"},"source":["### 4. 파생변수\n","* numeric 변수는 최대한 다양한 특징을 보일 수 있도록 생성\n","* category 변수는 여러가지를 조합해보았지만 전체 변수를 합친 ID 하나만 만들었을 때 가장 logloss가 낮았음"]},{"cell_type":"code","metadata":{"id":"cdacHqMUuMQh"},"source":["for df in [train,test]:\n","    # before_EMPLOYED: 고용되기 전까지의 일수\n","    df['before_EMPLOYED'] = df['DAYS_BIRTH'] - df['DAYS_EMPLOYED']\n","    df['income_total_befofeEMP_ratio'] = df['income_total'] / df['before_EMPLOYED']\n","    df['before_EMPLOYED_m'] = np.floor(df['before_EMPLOYED'] / 30) - ((np.floor(df['before_EMPLOYED'] / 30) / 12).astype(int) * 12)\n","    df['before_EMPLOYED_w'] = np.floor(df['before_EMPLOYED'] / 7) - ((np.floor(df['before_EMPLOYED'] / 7) / 4).astype(int) * 4)\n","    \n","    #DAYS_BIRTH 파생변수- Age(나이), 태어난 월, 태어난 주(출생연도의 n주차)\n","    df['Age'] = df['DAYS_BIRTH'] // 365\n","    df['DAYS_BIRTH_m'] = np.floor(df['DAYS_BIRTH'] / 30) - ((np.floor(df['DAYS_BIRTH'] / 30) / 12).astype(int) * 12)\n","    df['DAYS_BIRTH_w'] = np.floor(df['DAYS_BIRTH'] / 7) - ((np.floor(df['DAYS_BIRTH'] / 7) / 4).astype(int) * 4)\n","\n","    #DAYS_EMPLOYED_m 파생변수- EMPLOYED(근속연수), DAYS_EMPLOYED_m(고용된 달) ,DAYS_EMPLOYED_w(고용된 주(고용연도의 n주차))  \n","    df['EMPLOYED'] = df['DAYS_EMPLOYED'] // 365\n","    df['DAYS_EMPLOYED_m'] = np.floor(df['DAYS_EMPLOYED'] / 30) - ((np.floor(df['DAYS_EMPLOYED'] / 30) / 12).astype(int) * 12)\n","    df['DAYS_EMPLOYED_w'] = np.floor(df['DAYS_EMPLOYED'] / 7) - ((np.floor(df['DAYS_EMPLOYED'] / 7) / 4).astype(int) * 4)\n","\n","    #ability: 소득/(살아온 일수+ 근무일수)\n","    df['ability'] = df['income_total'] / (df['DAYS_BIRTH'] + df['DAYS_EMPLOYED'])\n","    \n","    #income_mean: 소득/ 가족 수\n","    df['income_mean'] = df['income_total'] / df['family_size']\n","    \n","    #ID 생성: 각 컬럼의 값들을 더해서 고유한 사람을 파악(*한 사람이 여러 개 카드를 만들 가능성을 고려해 begin_month는 제외함)\n","    df['ID'] = \\\n","    df['child_num'].astype(str) + '_' + df['income_total'].astype(str) + '_' +\\\n","    df['DAYS_BIRTH'].astype(str) + '_' + df['DAYS_EMPLOYED'].astype(str) + '_' +\\\n","    df['work_phone'].astype(str) + '_' + df['phone'].astype(str) + '_' +\\\n","    df['email'].astype(str) + '_' + df['family_size'].astype(str) + '_' +\\\n","    df['gender'].astype(str) + '_' + df['car'].astype(str) + '_' +\\\n","    df['reality'].astype(str) + '_' + df['income_type'].astype(str) + '_' +\\\n","    df['edu_type'].astype(str) + '_' + df['family_type'].astype(str) + '_' +\\\n","    df['house_type'].astype(str) + '_' + df['occyp_type'].astype(str)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cOgcH-7QuMS0"},"source":["### 5. 파생변수와 다중공선을 보이는 컬럼 삭제"]},{"cell_type":"code","metadata":{"id":"yXj6vpHpuMVO"},"source":["cols = ['child_num', 'DAYS_BIRTH', 'DAYS_EMPLOYED']\n","train.drop(cols, axis=1, inplace=True)\n","test.drop(cols, axis=1, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pqEdZPbvrJMx"},"source":["## Scaling, Encoding\n","1. Numeric, Category 컬럼 분류"]},{"cell_type":"code","metadata":{"id":"194d2bfVuMXy"},"source":["numerical_feats = train.dtypes[train.dtypes != 'object'].index.tolist()\n","numerical_feats.remove('credit')\n","print('Numbers of Numerical features: ', len(numerical_feats))\n","\n","categorical_feats = train.dtypes[train.dtypes == 'object'].index.tolist()\n","print('Number of Categorical features: ', len(categorical_feats))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gMhT1-xvuMaa"},"source":["numerical_feats"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"u8x90c7SuMc2"},"source":["categorical_feats"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5nbbRKgryFD5"},"source":["2. Log Scale\n","* income_total"]},{"cell_type":"code","metadata":{"id":"NdmzQEQAyFxy"},"source":["for df in [train, test] :\n","    df['income_total'] = np.log1p(1+df['income_total'])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Lm9044CSyF98"},"source":["3. OrdinalEncoder\n","* 카테고리 변수는 ordinal_encoder 변환\n","* ID는 변환 후 정수 처리"]},{"cell_type":"code","metadata":{"id":"IZT52e6XyGDI"},"source":["encoder = OrdinalEncoder(categorical_feats)\n","\n","train[categorical_feats] = encoder.fit_transform(train[categorical_feats], train['credit'])\n","test[categorical_feats] = encoder.transform(test[categorical_feats])\n","\n","train['ID'] = train['ID'].astype('int64')\n","test['ID'] = test['ID'].astype('int64')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"X7T_eHp0yGIh"},"source":["4. 클러스터링 구성\n","* 타겟을 결정짓는 뚜렷한 특징을 갖는 피쳐를 찾지 못해 clustering 시도"]},{"cell_type":"code","metadata":{"id":"jmBagwz2yGQz"},"source":["kmeans_train = train.drop(['credit'], axis=1)\n","kmeans = KMeans(n_clusters=36, random_state=42).fit(kmeans_train)\n","train['cluster'] = kmeans.predict(kmeans_train)\n","test['cluster'] = kmeans.predict(test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YKvkxtTbyGTO"},"source":["5. StandardScale\n","* 이미 로그변환을 진행한 income_total을 제외한 나머지 numeric 컬럼 정규화"]},{"cell_type":"code","metadata":{"id":"k3TrtbDbJKMf"},"source":["numerical_feats.remove('income_total')\n","scaler = StandardScaler()\n","train[numerical_feats] = scaler.fit_transform(train[numerical_feats])\n","test[numerical_feats] = scaler.fit_transform(test[numerical_feats])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xks7xBErJKR2"},"source":["## Modeling - catboost\n","* fold 수를 5부터 17까지 돌려보고 최적 fold 15로 판단 후 선택\n","* parameter를 default로 두는 것이 logloss가 가장 낮았음\n","* ref) Catboost Documentation - https://catboost.ai/docs/concepts/python-reference_catboostclassifier.html"]},{"cell_type":"code","metadata":{"id":"VACvR0GaJKU6"},"source":["n_est = 2000\n","seed = 42\n","n_fold = 15\n","n_class = 3\n","\n","target = 'credit'\n","X = train.drop(target, axis=1)\n","y = train[target]\n","X_test = test"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8N8I7JJbJKXW"},"source":["skfold = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state=seed)\n","folds = []\n","for train_idx, valid_idx in skfold.split(X, y) :\n","    folds.append((train_idx, valid_idx))\n","\n","cat_pred = np.zeros((X.shape[0], n_class))\n","cat_pred_test = np.zeros((X_test.shape[0], n_class))\n","cat_cols = ['income_type', 'edu_type', 'family_type', 'house_type', 'occyp_type', 'ID']\n","for fold in range(n_fold) : \n","    print(f'\\n------------------- Fold {fold} --------------\\n')\n","    train_idx, valid_idx = folds[fold]\n","    X_train, X_valid, y_train, y_valid = X.iloc[train_idx], X.iloc[valid_idx], y[train_idx], y[valid_idx]\n","    train_data = Pool(data= X_train, label = y_train, cat_features=cat_cols)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Kdtm3vZvJKY7"},"source":["train_data"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1CPBpEFaJKby"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"walibbfkJKd4"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Gd_doiQ8JKgt"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JS6krAXkJKj3"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TyzQ7aRtJKlf"},"source":[""],"execution_count":null,"outputs":[]}]}